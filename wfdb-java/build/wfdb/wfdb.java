/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.8
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package wfdb;

public class wfdb implements wfdbConstants {
  public static int annopen(String record, WFDB_Anninfo aiarray, long nann) {
    return wfdbJNI.annopen(record, WFDB_Anninfo.getCPtr(aiarray), aiarray, nann);
  }

  public static int isigopen(String record, WFDB_Siginfo siarray, int nsig) {
    return wfdbJNI.isigopen(record, WFDB_Siginfo.getCPtr(siarray), siarray, nsig);
  }

  public static int osigopen(String record, WFDB_Siginfo siarray, long nsig) {
    return wfdbJNI.osigopen(record, WFDB_Siginfo.getCPtr(siarray), siarray, nsig);
  }

  public static int osigfopen(WFDB_Siginfo siarray, long nsig) {
    return wfdbJNI.osigfopen(WFDB_Siginfo.getCPtr(siarray), siarray, nsig);
  }

  public static int wfdbinit(String record, WFDB_Anninfo aiarray, long nann, WFDB_Siginfo siarray, long nsig) {
    return wfdbJNI.wfdbinit(record, WFDB_Anninfo.getCPtr(aiarray), aiarray, nann, WFDB_Siginfo.getCPtr(siarray), siarray, nsig);
  }

  public static int findsig(String signame) {
    return wfdbJNI.findsig(signame);
  }

  public static int getspf() {
    return wfdbJNI.getspf();
  }

  public static void setgvmode(int mode) {
    wfdbJNI.setgvmode(mode);
  }

  public static int getgvmode() {
    return wfdbJNI.getgvmode();
  }

  public static int setifreq(double freq) {
    return wfdbJNI.setifreq(freq);
  }

  public static double getifreq() {
    return wfdbJNI.getifreq();
  }

  public static int getvec(SWIGTYPE_p_int vector) {
    return wfdbJNI.getvec(SWIGTYPE_p_int.getCPtr(vector));
  }

  public static int getframe(SWIGTYPE_p_int vector) {
    return wfdbJNI.getframe(SWIGTYPE_p_int.getCPtr(vector));
  }

  public static int putvec(SWIGTYPE_p_int vector) {
    return wfdbJNI.putvec(SWIGTYPE_p_int.getCPtr(vector));
  }

  public static int getann(long a, WFDB_Annotation annot) {
    return wfdbJNI.getann(a, WFDB_Annotation.getCPtr(annot), annot);
  }

  public static int ungetann(long a, WFDB_Annotation annot) {
    return wfdbJNI.ungetann(a, WFDB_Annotation.getCPtr(annot), annot);
  }

  public static int putann(long a, WFDB_Annotation annot) {
    return wfdbJNI.putann(a, WFDB_Annotation.getCPtr(annot), annot);
  }

  public static int isigsettime(int t) {
    return wfdbJNI.isigsettime(t);
  }

  public static int isgsettime(long g, int t) {
    return wfdbJNI.isgsettime(g, t);
  }

  public static int tnextvec(long s, int t) {
    return wfdbJNI.tnextvec(s, t);
  }

  public static int iannsettime(int t) {
    return wfdbJNI.iannsettime(t);
  }

  public static String ecgstr(int annotation_code) {
    return wfdbJNI.ecgstr(annotation_code);
  }

  public static int strecg(String annotation_mnemonic_string) {
    return wfdbJNI.strecg(annotation_mnemonic_string);
  }

  public static int setecgstr(int annotation_code, String annotation_mnemonic_string) {
    return wfdbJNI.setecgstr(annotation_code, annotation_mnemonic_string);
  }

  public static String annstr(int annotation_code) {
    return wfdbJNI.annstr(annotation_code);
  }

  public static int strann(String annotation_mnemonic_string) {
    return wfdbJNI.strann(annotation_mnemonic_string);
  }

  public static int setannstr(int annotation_code, String annotation_mnemonic_string) {
    return wfdbJNI.setannstr(annotation_code, annotation_mnemonic_string);
  }

  public static String anndesc(int annotation_code) {
    return wfdbJNI.anndesc(annotation_code);
  }

  public static int setanndesc(int annotation_code, String annotation_description) {
    return wfdbJNI.setanndesc(annotation_code, annotation_description);
  }

  public static void setafreq(double f) {
    wfdbJNI.setafreq(f);
  }

  public static double getafreq() {
    return wfdbJNI.getafreq();
  }

  public static void iannclose(long a) {
    wfdbJNI.iannclose(a);
  }

  public static void oannclose(long a) {
    wfdbJNI.oannclose(a);
  }

  public static int wfdb_isann(int code) {
    return wfdbJNI.wfdb_isann(code);
  }

  public static int wfdb_isqrs(int code) {
    return wfdbJNI.wfdb_isqrs(code);
  }

  public static int wfdb_setisqrs(int code, int newval) {
    return wfdbJNI.wfdb_setisqrs(code, newval);
  }

  public static int wfdb_map1(int code) {
    return wfdbJNI.wfdb_map1(code);
  }

  public static int wfdb_setmap1(int code, int newval) {
    return wfdbJNI.wfdb_setmap1(code, newval);
  }

  public static int wfdb_map2(int code) {
    return wfdbJNI.wfdb_map2(code);
  }

  public static int wfdb_setmap2(int code, int newval) {
    return wfdbJNI.wfdb_setmap2(code, newval);
  }

  public static int wfdb_ammap(int code) {
    return wfdbJNI.wfdb_ammap(code);
  }

  public static int wfdb_mamap(int code, int subtype) {
    return wfdbJNI.wfdb_mamap(code, subtype);
  }

  public static int wfdb_annpos(int code) {
    return wfdbJNI.wfdb_annpos(code);
  }

  public static int wfdb_setannpos(int code, int newval) {
    return wfdbJNI.wfdb_setannpos(code, newval);
  }

  public static String timstr(int t) {
    return wfdbJNI.timstr(t);
  }

  public static String mstimstr(int t) {
    return wfdbJNI.mstimstr(t);
  }

  public static int strtim(String time_string) {
    return wfdbJNI.strtim(time_string);
  }

  public static String datstr(int d) {
    return wfdbJNI.datstr(d);
  }

  public static int strdat(String date_string) {
    return wfdbJNI.strdat(date_string);
  }

  public static int adumuv(long s, int a) {
    return wfdbJNI.adumuv(s, a);
  }

  public static int muvadu(long s, int microvolts) {
    return wfdbJNI.muvadu(s, microvolts);
  }

  public static double aduphys(long s, int a) {
    return wfdbJNI.aduphys(s, a);
  }

  public static int physadu(long s, double v) {
    return wfdbJNI.physadu(s, v);
  }

  public static int sample(long s, int t) {
    return wfdbJNI.sample(s, t);
  }

  public static int sample_valid() {
    return wfdbJNI.sample_valid();
  }

  public static int calopen(String calibration_filename) {
    return wfdbJNI.calopen(calibration_filename);
  }

  public static int getcal(String description, String units, WFDB_Calinfo cal) {
    return wfdbJNI.getcal(description, units, WFDB_Calinfo.getCPtr(cal), cal);
  }

  public static int putcal(WFDB_Calinfo cal) {
    return wfdbJNI.putcal(WFDB_Calinfo.getCPtr(cal), cal);
  }

  public static int newcal(String calibration_filename) {
    return wfdbJNI.newcal(calibration_filename);
  }

  public static void flushcal() {
    wfdbJNI.flushcal();
  }

  public static String getinfo(String record) {
    return wfdbJNI.getinfo(record);
  }

  public static int putinfo(String info) {
    return wfdbJNI.putinfo(info);
  }

  public static int setinfo(String record) {
    return wfdbJNI.setinfo(record);
  }

  public static void wfdb_freeinfo() {
    wfdbJNI.wfdb_freeinfo();
  }

  public static int newheader(String record) {
    return wfdbJNI.newheader(record);
  }

  public static int setheader(String record, WFDB_Siginfo siarray, long nsig) {
    return wfdbJNI.setheader(record, WFDB_Siginfo.getCPtr(siarray), siarray, nsig);
  }

  public static int setmsheader(String record, SWIGTYPE_p_p_char segnames, long nsegments) {
    return wfdbJNI.setmsheader(record, SWIGTYPE_p_p_char.getCPtr(segnames), nsegments);
  }

  public static int getseginfo(SWIGTYPE_p_p_WFDB_seginfo segments) {
    return wfdbJNI.getseginfo(SWIGTYPE_p_p_WFDB_seginfo.getCPtr(segments));
  }

  public static int wfdbgetskew(long s) {
    return wfdbJNI.wfdbgetskew(s);
  }

  public static void wfdbsetiskew(long s, int skew) {
    wfdbJNI.wfdbsetiskew(s, skew);
  }

  public static void wfdbsetskew(long s, int skew) {
    wfdbJNI.wfdbsetskew(s, skew);
  }

  public static int wfdbgetstart(long s) {
    return wfdbJNI.wfdbgetstart(s);
  }

  public static void wfdbsetstart(long s, int bytes) {
    wfdbJNI.wfdbsetstart(s, bytes);
  }

  public static int wfdbputprolog(String prolog, int bytes, long s) {
    return wfdbJNI.wfdbputprolog(prolog, bytes, s);
  }

  public static void wfdbquit() {
    wfdbJNI.wfdbquit();
  }

  public static double sampfreq(String record) {
    return wfdbJNI.sampfreq(record);
  }

  public static int setsampfreq(double sampling_frequency) {
    return wfdbJNI.setsampfreq(sampling_frequency);
  }

  public static double getcfreq() {
    return wfdbJNI.getcfreq();
  }

  public static void setcfreq(double counter_frequency) {
    wfdbJNI.setcfreq(counter_frequency);
  }

  public static double getbasecount() {
    return wfdbJNI.getbasecount();
  }

  public static void setbasecount(double count) {
    wfdbJNI.setbasecount(count);
  }

  public static int setbasetime(String time_string) {
    return wfdbJNI.setbasetime(time_string);
  }

  public static void wfdbquiet() {
    wfdbJNI.wfdbquiet();
  }

  public static void wfdbverbose() {
    wfdbJNI.wfdbverbose();
  }

  public static String wfdberror() {
    return wfdbJNI.wfdberror();
  }

  public static void setwfdb(String database_path_string) {
    wfdbJNI.setwfdb(database_path_string);
  }

  public static String getwfdb() {
    return wfdbJNI.getwfdb();
  }

  public static void resetwfdb() {
    wfdbJNI.resetwfdb();
  }

  public static int setibsize(int input_buffer_size) {
    return wfdbJNI.setibsize(input_buffer_size);
  }

  public static int setobsize(int output_buffer_size) {
    return wfdbJNI.setobsize(output_buffer_size);
  }

  public static String wfdbfile(String file_type, String record) {
    return wfdbJNI.wfdbfile(file_type, record);
  }

  public static void wfdbflush() {
    wfdbJNI.wfdbflush();
  }

  public static void wfdbmemerr(int exit_on_error) {
    wfdbJNI.wfdbmemerr(exit_on_error);
  }

  public static String wfdbversion() {
    return wfdbJNI.wfdbversion();
  }

  public static String wfdbldflags() {
    return wfdbJNI.wfdbldflags();
  }

  public static String wfdbcflags() {
    return wfdbJNI.wfdbcflags();
  }

  public static String wfdbdefwfdb() {
    return wfdbJNI.wfdbdefwfdb();
  }

  public static String wfdbdefwfdbcal() {
    return wfdbJNI.wfdbdefwfdbcal();
  }

  public static void set_nvsig(int value) {
    wfdbJNI._nvsig_set(value);
  }

  public static int get_nvsig() {
    return wfdbJNI._nvsig_get();
  }

  public static int spy_nvsig() {
    return wfdbJNI.spy_nvsig();
  }

  public static void set_nsamps(int value) {
    wfdbJNI._nsamps_set(value);
  }

  public static int get_nsamps() {
    return wfdbJNI._nsamps_get();
  }

  public static int spy_nsamps() {
    return wfdbJNI.spy_nsamps();
  }

  public static int getvec2(SWIGTYPE_p_int vector, int nsamples) {
    return wfdbJNI.getvec2(SWIGTYPE_p_int.getCPtr(vector), nsamples);
  }

  public static int getvec2p(SWIGTYPE_p_double vector, int nsamples) {
    return wfdbJNI.getvec2p(SWIGTYPE_p_double.getCPtr(vector), nsamples);
  }

}
