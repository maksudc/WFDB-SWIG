# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_wfdb', [dirname(__file__)])
        except ImportError:
            import _wfdb
            return _wfdb
        if fp is not None:
            try:
                _mod = imp.load_module('_wfdb', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _wfdb = swig_import_helper()
    del swig_import_helper
else:
    import _wfdb
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class WFDB_Siginfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFDB_Siginfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WFDB_Siginfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["fname"] = _wfdb.WFDB_Siginfo_fname_set
    __swig_getmethods__["fname"] = _wfdb.WFDB_Siginfo_fname_get
    if _newclass:fname = _swig_property(_wfdb.WFDB_Siginfo_fname_get, _wfdb.WFDB_Siginfo_fname_set)
    __swig_setmethods__["desc"] = _wfdb.WFDB_Siginfo_desc_set
    __swig_getmethods__["desc"] = _wfdb.WFDB_Siginfo_desc_get
    if _newclass:desc = _swig_property(_wfdb.WFDB_Siginfo_desc_get, _wfdb.WFDB_Siginfo_desc_set)
    __swig_setmethods__["units"] = _wfdb.WFDB_Siginfo_units_set
    __swig_getmethods__["units"] = _wfdb.WFDB_Siginfo_units_get
    if _newclass:units = _swig_property(_wfdb.WFDB_Siginfo_units_get, _wfdb.WFDB_Siginfo_units_set)
    __swig_setmethods__["gain"] = _wfdb.WFDB_Siginfo_gain_set
    __swig_getmethods__["gain"] = _wfdb.WFDB_Siginfo_gain_get
    if _newclass:gain = _swig_property(_wfdb.WFDB_Siginfo_gain_get, _wfdb.WFDB_Siginfo_gain_set)
    __swig_setmethods__["initval"] = _wfdb.WFDB_Siginfo_initval_set
    __swig_getmethods__["initval"] = _wfdb.WFDB_Siginfo_initval_get
    if _newclass:initval = _swig_property(_wfdb.WFDB_Siginfo_initval_get, _wfdb.WFDB_Siginfo_initval_set)
    __swig_setmethods__["group"] = _wfdb.WFDB_Siginfo_group_set
    __swig_getmethods__["group"] = _wfdb.WFDB_Siginfo_group_get
    if _newclass:group = _swig_property(_wfdb.WFDB_Siginfo_group_get, _wfdb.WFDB_Siginfo_group_set)
    __swig_setmethods__["fmt"] = _wfdb.WFDB_Siginfo_fmt_set
    __swig_getmethods__["fmt"] = _wfdb.WFDB_Siginfo_fmt_get
    if _newclass:fmt = _swig_property(_wfdb.WFDB_Siginfo_fmt_get, _wfdb.WFDB_Siginfo_fmt_set)
    __swig_setmethods__["spf"] = _wfdb.WFDB_Siginfo_spf_set
    __swig_getmethods__["spf"] = _wfdb.WFDB_Siginfo_spf_get
    if _newclass:spf = _swig_property(_wfdb.WFDB_Siginfo_spf_get, _wfdb.WFDB_Siginfo_spf_set)
    __swig_setmethods__["bsize"] = _wfdb.WFDB_Siginfo_bsize_set
    __swig_getmethods__["bsize"] = _wfdb.WFDB_Siginfo_bsize_get
    if _newclass:bsize = _swig_property(_wfdb.WFDB_Siginfo_bsize_get, _wfdb.WFDB_Siginfo_bsize_set)
    __swig_setmethods__["adcres"] = _wfdb.WFDB_Siginfo_adcres_set
    __swig_getmethods__["adcres"] = _wfdb.WFDB_Siginfo_adcres_get
    if _newclass:adcres = _swig_property(_wfdb.WFDB_Siginfo_adcres_get, _wfdb.WFDB_Siginfo_adcres_set)
    __swig_setmethods__["adczero"] = _wfdb.WFDB_Siginfo_adczero_set
    __swig_getmethods__["adczero"] = _wfdb.WFDB_Siginfo_adczero_get
    if _newclass:adczero = _swig_property(_wfdb.WFDB_Siginfo_adczero_get, _wfdb.WFDB_Siginfo_adczero_set)
    __swig_setmethods__["baseline"] = _wfdb.WFDB_Siginfo_baseline_set
    __swig_getmethods__["baseline"] = _wfdb.WFDB_Siginfo_baseline_get
    if _newclass:baseline = _swig_property(_wfdb.WFDB_Siginfo_baseline_get, _wfdb.WFDB_Siginfo_baseline_set)
    __swig_setmethods__["nsamp"] = _wfdb.WFDB_Siginfo_nsamp_set
    __swig_getmethods__["nsamp"] = _wfdb.WFDB_Siginfo_nsamp_get
    if _newclass:nsamp = _swig_property(_wfdb.WFDB_Siginfo_nsamp_get, _wfdb.WFDB_Siginfo_nsamp_set)
    __swig_setmethods__["cksum"] = _wfdb.WFDB_Siginfo_cksum_set
    __swig_getmethods__["cksum"] = _wfdb.WFDB_Siginfo_cksum_get
    if _newclass:cksum = _swig_property(_wfdb.WFDB_Siginfo_cksum_get, _wfdb.WFDB_Siginfo_cksum_set)
    def __init__(self): 
        this = _wfdb.new_WFDB_Siginfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_WFDB_Siginfo
    __del__ = lambda self : None;
WFDB_Siginfo_swigregister = _wfdb.WFDB_Siginfo_swigregister
WFDB_Siginfo_swigregister(WFDB_Siginfo)

class WFDB_Calinfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFDB_Calinfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WFDB_Calinfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["low"] = _wfdb.WFDB_Calinfo_low_set
    __swig_getmethods__["low"] = _wfdb.WFDB_Calinfo_low_get
    if _newclass:low = _swig_property(_wfdb.WFDB_Calinfo_low_get, _wfdb.WFDB_Calinfo_low_set)
    __swig_setmethods__["high"] = _wfdb.WFDB_Calinfo_high_set
    __swig_getmethods__["high"] = _wfdb.WFDB_Calinfo_high_get
    if _newclass:high = _swig_property(_wfdb.WFDB_Calinfo_high_get, _wfdb.WFDB_Calinfo_high_set)
    __swig_setmethods__["scale"] = _wfdb.WFDB_Calinfo_scale_set
    __swig_getmethods__["scale"] = _wfdb.WFDB_Calinfo_scale_get
    if _newclass:scale = _swig_property(_wfdb.WFDB_Calinfo_scale_get, _wfdb.WFDB_Calinfo_scale_set)
    __swig_setmethods__["sigtype"] = _wfdb.WFDB_Calinfo_sigtype_set
    __swig_getmethods__["sigtype"] = _wfdb.WFDB_Calinfo_sigtype_get
    if _newclass:sigtype = _swig_property(_wfdb.WFDB_Calinfo_sigtype_get, _wfdb.WFDB_Calinfo_sigtype_set)
    __swig_setmethods__["units"] = _wfdb.WFDB_Calinfo_units_set
    __swig_getmethods__["units"] = _wfdb.WFDB_Calinfo_units_get
    if _newclass:units = _swig_property(_wfdb.WFDB_Calinfo_units_get, _wfdb.WFDB_Calinfo_units_set)
    __swig_setmethods__["caltype"] = _wfdb.WFDB_Calinfo_caltype_set
    __swig_getmethods__["caltype"] = _wfdb.WFDB_Calinfo_caltype_get
    if _newclass:caltype = _swig_property(_wfdb.WFDB_Calinfo_caltype_get, _wfdb.WFDB_Calinfo_caltype_set)
    def __init__(self): 
        this = _wfdb.new_WFDB_Calinfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_WFDB_Calinfo
    __del__ = lambda self : None;
WFDB_Calinfo_swigregister = _wfdb.WFDB_Calinfo_swigregister
WFDB_Calinfo_swigregister(WFDB_Calinfo)

class WFDB_Anninfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFDB_Anninfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WFDB_Anninfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _wfdb.WFDB_Anninfo_name_set
    __swig_getmethods__["name"] = _wfdb.WFDB_Anninfo_name_get
    if _newclass:name = _swig_property(_wfdb.WFDB_Anninfo_name_get, _wfdb.WFDB_Anninfo_name_set)
    __swig_setmethods__["stat"] = _wfdb.WFDB_Anninfo_stat_set
    __swig_getmethods__["stat"] = _wfdb.WFDB_Anninfo_stat_get
    if _newclass:stat = _swig_property(_wfdb.WFDB_Anninfo_stat_get, _wfdb.WFDB_Anninfo_stat_set)
    def __init__(self): 
        this = _wfdb.new_WFDB_Anninfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_WFDB_Anninfo
    __del__ = lambda self : None;
WFDB_Anninfo_swigregister = _wfdb.WFDB_Anninfo_swigregister
WFDB_Anninfo_swigregister(WFDB_Anninfo)

class WFDB_Annotation(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFDB_Annotation, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WFDB_Annotation, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _wfdb.WFDB_Annotation_time_set
    __swig_getmethods__["time"] = _wfdb.WFDB_Annotation_time_get
    if _newclass:time = _swig_property(_wfdb.WFDB_Annotation_time_get, _wfdb.WFDB_Annotation_time_set)
    __swig_setmethods__["anntyp"] = _wfdb.WFDB_Annotation_anntyp_set
    __swig_getmethods__["anntyp"] = _wfdb.WFDB_Annotation_anntyp_get
    if _newclass:anntyp = _swig_property(_wfdb.WFDB_Annotation_anntyp_get, _wfdb.WFDB_Annotation_anntyp_set)
    __swig_setmethods__["subtyp"] = _wfdb.WFDB_Annotation_subtyp_set
    __swig_getmethods__["subtyp"] = _wfdb.WFDB_Annotation_subtyp_get
    if _newclass:subtyp = _swig_property(_wfdb.WFDB_Annotation_subtyp_get, _wfdb.WFDB_Annotation_subtyp_set)
    __swig_setmethods__["chan"] = _wfdb.WFDB_Annotation_chan_set
    __swig_getmethods__["chan"] = _wfdb.WFDB_Annotation_chan_get
    if _newclass:chan = _swig_property(_wfdb.WFDB_Annotation_chan_get, _wfdb.WFDB_Annotation_chan_set)
    __swig_setmethods__["num"] = _wfdb.WFDB_Annotation_num_set
    __swig_getmethods__["num"] = _wfdb.WFDB_Annotation_num_get
    if _newclass:num = _swig_property(_wfdb.WFDB_Annotation_num_get, _wfdb.WFDB_Annotation_num_set)
    __swig_setmethods__["aux"] = _wfdb.WFDB_Annotation_aux_set
    __swig_getmethods__["aux"] = _wfdb.WFDB_Annotation_aux_get
    if _newclass:aux = _swig_property(_wfdb.WFDB_Annotation_aux_get, _wfdb.WFDB_Annotation_aux_set)
    def __init__(self): 
        this = _wfdb.new_WFDB_Annotation()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_WFDB_Annotation
    __del__ = lambda self : None;
WFDB_Annotation_swigregister = _wfdb.WFDB_Annotation_swigregister
WFDB_Annotation_swigregister(WFDB_Annotation)

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _wfdb.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _wfdb.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _wfdb.intArray___setitem__(self, *args)
    def cast(self): return _wfdb.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _wfdb.intArray_frompointer
    if _newclass:frompointer = staticmethod(_wfdb.intArray_frompointer)
intArray_swigregister = _wfdb.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _wfdb.intArray_frompointer(*args)
intArray_frompointer = _wfdb.intArray_frompointer

class WFDB_SampleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFDB_SampleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WFDB_SampleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _wfdb.new_WFDB_SampleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_WFDB_SampleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _wfdb.WFDB_SampleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _wfdb.WFDB_SampleArray___setitem__(self, *args)
    def cast(self): return _wfdb.WFDB_SampleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _wfdb.WFDB_SampleArray_frompointer
    if _newclass:frompointer = staticmethod(_wfdb.WFDB_SampleArray_frompointer)
WFDB_SampleArray_swigregister = _wfdb.WFDB_SampleArray_swigregister
WFDB_SampleArray_swigregister(WFDB_SampleArray)

def WFDB_SampleArray_frompointer(*args):
  return _wfdb.WFDB_SampleArray_frompointer(*args)
WFDB_SampleArray_frompointer = _wfdb.WFDB_SampleArray_frompointer

class WFDB_SiginfoArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFDB_SiginfoArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WFDB_SiginfoArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _wfdb.new_WFDB_SiginfoArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_WFDB_SiginfoArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _wfdb.WFDB_SiginfoArray___getitem__(self, *args)
    def __setitem__(self, *args): return _wfdb.WFDB_SiginfoArray___setitem__(self, *args)
    def cast(self): return _wfdb.WFDB_SiginfoArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _wfdb.WFDB_SiginfoArray_frompointer
    if _newclass:frompointer = staticmethod(_wfdb.WFDB_SiginfoArray_frompointer)
WFDB_SiginfoArray_swigregister = _wfdb.WFDB_SiginfoArray_swigregister
WFDB_SiginfoArray_swigregister(WFDB_SiginfoArray)

def WFDB_SiginfoArray_frompointer(*args):
  return _wfdb.WFDB_SiginfoArray_frompointer(*args)
WFDB_SiginfoArray_frompointer = _wfdb.WFDB_SiginfoArray_frompointer

class WFDB_AnninfoArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFDB_AnninfoArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WFDB_AnninfoArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _wfdb.new_WFDB_AnninfoArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_WFDB_AnninfoArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _wfdb.WFDB_AnninfoArray___getitem__(self, *args)
    def __setitem__(self, *args): return _wfdb.WFDB_AnninfoArray___setitem__(self, *args)
    def cast(self): return _wfdb.WFDB_AnninfoArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _wfdb.WFDB_AnninfoArray_frompointer
    if _newclass:frompointer = staticmethod(_wfdb.WFDB_AnninfoArray_frompointer)
WFDB_AnninfoArray_swigregister = _wfdb.WFDB_AnninfoArray_swigregister
WFDB_AnninfoArray_swigregister(WFDB_AnninfoArray)

def WFDB_AnninfoArray_frompointer(*args):
  return _wfdb.WFDB_AnninfoArray_frompointer(*args)
WFDB_AnninfoArray_frompointer = _wfdb.WFDB_AnninfoArray_frompointer

class WFDB_AnnotationArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFDB_AnnotationArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WFDB_AnnotationArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _wfdb.new_WFDB_AnnotationArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_WFDB_AnnotationArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _wfdb.WFDB_AnnotationArray___getitem__(self, *args)
    def __setitem__(self, *args): return _wfdb.WFDB_AnnotationArray___setitem__(self, *args)
    def cast(self): return _wfdb.WFDB_AnnotationArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _wfdb.WFDB_AnnotationArray_frompointer
    if _newclass:frompointer = staticmethod(_wfdb.WFDB_AnnotationArray_frompointer)
WFDB_AnnotationArray_swigregister = _wfdb.WFDB_AnnotationArray_swigregister
WFDB_AnnotationArray_swigregister(WFDB_AnnotationArray)

def WFDB_AnnotationArray_frompointer(*args):
  return _wfdb.WFDB_AnnotationArray_frompointer(*args)
WFDB_AnnotationArray_frompointer = _wfdb.WFDB_AnnotationArray_frompointer

NOTQRS = _wfdb.NOTQRS
NORMAL = _wfdb.NORMAL
LBBB = _wfdb.LBBB
RBBB = _wfdb.RBBB
ABERR = _wfdb.ABERR
PVC = _wfdb.PVC
FUSION = _wfdb.FUSION
NPC = _wfdb.NPC
APC = _wfdb.APC
SVPB = _wfdb.SVPB
VESC = _wfdb.VESC
NESC = _wfdb.NESC
PACE = _wfdb.PACE
UNKNOWN = _wfdb.UNKNOWN
NOISE = _wfdb.NOISE
ARFCT = _wfdb.ARFCT
STCH = _wfdb.STCH
TCH = _wfdb.TCH
SYSTOLE = _wfdb.SYSTOLE
DIASTOLE = _wfdb.DIASTOLE
NOTE = _wfdb.NOTE
MEASURE = _wfdb.MEASURE
PWAVE = _wfdb.PWAVE
BBB = _wfdb.BBB
PACESP = _wfdb.PACESP
TWAVE = _wfdb.TWAVE
RHYTHM = _wfdb.RHYTHM
UWAVE = _wfdb.UWAVE
LEARN = _wfdb.LEARN
FLWAV = _wfdb.FLWAV
VFON = _wfdb.VFON
VFOFF = _wfdb.VFOFF
AESC = _wfdb.AESC
SVESC = _wfdb.SVESC
LINK = _wfdb.LINK
NAPC = _wfdb.NAPC
PFUS = _wfdb.PFUS
WFON = _wfdb.WFON
PQ = _wfdb.PQ
WFOFF = _wfdb.WFOFF
JPT = _wfdb.JPT
RONT = _wfdb.RONT
ACMAX = _wfdb.ACMAX
WFDB_MAJOR = _wfdb.WFDB_MAJOR
WFDB_MINOR = _wfdb.WFDB_MINOR
WFDB_RELEASE = _wfdb.WFDB_RELEASE
WFDB_NETFILES = _wfdb.WFDB_NETFILES
WFDB_NETFILES_LIBCURL = _wfdb.WFDB_NETFILES_LIBCURL
WFDB_INVALID_SAMPLE = _wfdb.WFDB_INVALID_SAMPLE
WFDB_MAXANN = _wfdb.WFDB_MAXANN
WFDB_MAXSIG = _wfdb.WFDB_MAXSIG
WFDB_MAXSPF = _wfdb.WFDB_MAXSPF
WFDB_MAXRNL = _wfdb.WFDB_MAXRNL
WFDB_MAXUSL = _wfdb.WFDB_MAXUSL
WFDB_MAXDSL = _wfdb.WFDB_MAXDSL
WFDB_READ = _wfdb.WFDB_READ
WFDB_WRITE = _wfdb.WFDB_WRITE
WFDB_AHA_READ = _wfdb.WFDB_AHA_READ
WFDB_AHA_WRITE = _wfdb.WFDB_AHA_WRITE
WFDB_APPEND = _wfdb.WFDB_APPEND
WFDB_NFMTS = _wfdb.WFDB_NFMTS
WFDB_DEFFREQ = _wfdb.WFDB_DEFFREQ
WFDB_DEFGAIN = _wfdb.WFDB_DEFGAIN
WFDB_DEFRES = _wfdb.WFDB_DEFRES
WFDB_LOWRES = _wfdb.WFDB_LOWRES
WFDB_HIGHRES = _wfdb.WFDB_HIGHRES
WFDB_GVPAD = _wfdb.WFDB_GVPAD
WFDB_AC_COUPLED = _wfdb.WFDB_AC_COUPLED
WFDB_DC_COUPLED = _wfdb.WFDB_DC_COUPLED
WFDB_CAL_SQUARE = _wfdb.WFDB_CAL_SQUARE
WFDB_CAL_SINE = _wfdb.WFDB_CAL_SINE
WFDB_CAL_SAWTOOTH = _wfdb.WFDB_CAL_SAWTOOTH
WFDB_CAL_UNDEF = _wfdb.WFDB_CAL_UNDEF
class WFDB_seginfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, WFDB_seginfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, WFDB_seginfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["recname"] = _wfdb.WFDB_seginfo_recname_set
    __swig_getmethods__["recname"] = _wfdb.WFDB_seginfo_recname_get
    if _newclass:recname = _swig_property(_wfdb.WFDB_seginfo_recname_get, _wfdb.WFDB_seginfo_recname_set)
    __swig_setmethods__["nsamp"] = _wfdb.WFDB_seginfo_nsamp_set
    __swig_getmethods__["nsamp"] = _wfdb.WFDB_seginfo_nsamp_get
    if _newclass:nsamp = _swig_property(_wfdb.WFDB_seginfo_nsamp_get, _wfdb.WFDB_seginfo_nsamp_set)
    __swig_setmethods__["samp0"] = _wfdb.WFDB_seginfo_samp0_set
    __swig_getmethods__["samp0"] = _wfdb.WFDB_seginfo_samp0_get
    if _newclass:samp0 = _swig_property(_wfdb.WFDB_seginfo_samp0_get, _wfdb.WFDB_seginfo_samp0_set)
    def __init__(self): 
        this = _wfdb.new_WFDB_seginfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _wfdb.delete_WFDB_seginfo
    __del__ = lambda self : None;
WFDB_seginfo_swigregister = _wfdb.WFDB_seginfo_swigregister
WFDB_seginfo_swigregister(WFDB_seginfo)


def annopen(*args):
  return _wfdb.annopen(*args)
annopen = _wfdb.annopen

def isigopen(*args):
  return _wfdb.isigopen(*args)
isigopen = _wfdb.isigopen

def osigopen(*args):
  return _wfdb.osigopen(*args)
osigopen = _wfdb.osigopen

def osigfopen(*args):
  return _wfdb.osigfopen(*args)
osigfopen = _wfdb.osigfopen

def wfdbinit(*args):
  return _wfdb.wfdbinit(*args)
wfdbinit = _wfdb.wfdbinit

def findsig(*args):
  return _wfdb.findsig(*args)
findsig = _wfdb.findsig

def getspf():
  return _wfdb.getspf()
getspf = _wfdb.getspf

def setgvmode(*args):
  return _wfdb.setgvmode(*args)
setgvmode = _wfdb.setgvmode

def getgvmode():
  return _wfdb.getgvmode()
getgvmode = _wfdb.getgvmode

def setifreq(*args):
  return _wfdb.setifreq(*args)
setifreq = _wfdb.setifreq

def getifreq():
  return _wfdb.getifreq()
getifreq = _wfdb.getifreq

def getvec(*args):
  return _wfdb.getvec(*args)
getvec = _wfdb.getvec

def getframe(*args):
  return _wfdb.getframe(*args)
getframe = _wfdb.getframe

def putvec(*args):
  return _wfdb.putvec(*args)
putvec = _wfdb.putvec

def getann(*args):
  return _wfdb.getann(*args)
getann = _wfdb.getann

def ungetann(*args):
  return _wfdb.ungetann(*args)
ungetann = _wfdb.ungetann

def putann(*args):
  return _wfdb.putann(*args)
putann = _wfdb.putann

def isigsettime(*args):
  return _wfdb.isigsettime(*args)
isigsettime = _wfdb.isigsettime

def isgsettime(*args):
  return _wfdb.isgsettime(*args)
isgsettime = _wfdb.isgsettime

def tnextvec(*args):
  return _wfdb.tnextvec(*args)
tnextvec = _wfdb.tnextvec

def iannsettime(*args):
  return _wfdb.iannsettime(*args)
iannsettime = _wfdb.iannsettime

def ecgstr(*args):
  return _wfdb.ecgstr(*args)
ecgstr = _wfdb.ecgstr

def strecg(*args):
  return _wfdb.strecg(*args)
strecg = _wfdb.strecg

def setecgstr(*args):
  return _wfdb.setecgstr(*args)
setecgstr = _wfdb.setecgstr

def annstr(*args):
  return _wfdb.annstr(*args)
annstr = _wfdb.annstr

def strann(*args):
  return _wfdb.strann(*args)
strann = _wfdb.strann

def setannstr(*args):
  return _wfdb.setannstr(*args)
setannstr = _wfdb.setannstr

def anndesc(*args):
  return _wfdb.anndesc(*args)
anndesc = _wfdb.anndesc

def setanndesc(*args):
  return _wfdb.setanndesc(*args)
setanndesc = _wfdb.setanndesc

def setafreq(*args):
  return _wfdb.setafreq(*args)
setafreq = _wfdb.setafreq

def getafreq():
  return _wfdb.getafreq()
getafreq = _wfdb.getafreq

def iannclose(*args):
  return _wfdb.iannclose(*args)
iannclose = _wfdb.iannclose

def oannclose(*args):
  return _wfdb.oannclose(*args)
oannclose = _wfdb.oannclose

def wfdb_isann(*args):
  return _wfdb.wfdb_isann(*args)
wfdb_isann = _wfdb.wfdb_isann

def wfdb_isqrs(*args):
  return _wfdb.wfdb_isqrs(*args)
wfdb_isqrs = _wfdb.wfdb_isqrs

def wfdb_setisqrs(*args):
  return _wfdb.wfdb_setisqrs(*args)
wfdb_setisqrs = _wfdb.wfdb_setisqrs

def wfdb_map1(*args):
  return _wfdb.wfdb_map1(*args)
wfdb_map1 = _wfdb.wfdb_map1

def wfdb_setmap1(*args):
  return _wfdb.wfdb_setmap1(*args)
wfdb_setmap1 = _wfdb.wfdb_setmap1

def wfdb_map2(*args):
  return _wfdb.wfdb_map2(*args)
wfdb_map2 = _wfdb.wfdb_map2

def wfdb_setmap2(*args):
  return _wfdb.wfdb_setmap2(*args)
wfdb_setmap2 = _wfdb.wfdb_setmap2

def wfdb_ammap(*args):
  return _wfdb.wfdb_ammap(*args)
wfdb_ammap = _wfdb.wfdb_ammap

def wfdb_mamap(*args):
  return _wfdb.wfdb_mamap(*args)
wfdb_mamap = _wfdb.wfdb_mamap

def wfdb_annpos(*args):
  return _wfdb.wfdb_annpos(*args)
wfdb_annpos = _wfdb.wfdb_annpos

def wfdb_setannpos(*args):
  return _wfdb.wfdb_setannpos(*args)
wfdb_setannpos = _wfdb.wfdb_setannpos

def timstr(*args):
  return _wfdb.timstr(*args)
timstr = _wfdb.timstr

def mstimstr(*args):
  return _wfdb.mstimstr(*args)
mstimstr = _wfdb.mstimstr

def strtim(*args):
  return _wfdb.strtim(*args)
strtim = _wfdb.strtim

def datstr(*args):
  return _wfdb.datstr(*args)
datstr = _wfdb.datstr

def strdat(*args):
  return _wfdb.strdat(*args)
strdat = _wfdb.strdat

def adumuv(*args):
  return _wfdb.adumuv(*args)
adumuv = _wfdb.adumuv

def muvadu(*args):
  return _wfdb.muvadu(*args)
muvadu = _wfdb.muvadu

def aduphys(*args):
  return _wfdb.aduphys(*args)
aduphys = _wfdb.aduphys

def physadu(*args):
  return _wfdb.physadu(*args)
physadu = _wfdb.physadu

def sample(*args):
  return _wfdb.sample(*args)
sample = _wfdb.sample

def sample_valid():
  return _wfdb.sample_valid()
sample_valid = _wfdb.sample_valid

def calopen(*args):
  return _wfdb.calopen(*args)
calopen = _wfdb.calopen

def getcal(*args):
  return _wfdb.getcal(*args)
getcal = _wfdb.getcal

def putcal(*args):
  return _wfdb.putcal(*args)
putcal = _wfdb.putcal

def newcal(*args):
  return _wfdb.newcal(*args)
newcal = _wfdb.newcal

def flushcal():
  return _wfdb.flushcal()
flushcal = _wfdb.flushcal

def getinfo(*args):
  return _wfdb.getinfo(*args)
getinfo = _wfdb.getinfo

def putinfo(*args):
  return _wfdb.putinfo(*args)
putinfo = _wfdb.putinfo

def setinfo(*args):
  return _wfdb.setinfo(*args)
setinfo = _wfdb.setinfo

def wfdb_freeinfo():
  return _wfdb.wfdb_freeinfo()
wfdb_freeinfo = _wfdb.wfdb_freeinfo

def newheader(*args):
  return _wfdb.newheader(*args)
newheader = _wfdb.newheader

def setheader(*args):
  return _wfdb.setheader(*args)
setheader = _wfdb.setheader

def setmsheader(*args):
  return _wfdb.setmsheader(*args)
setmsheader = _wfdb.setmsheader

def getseginfo(*args):
  return _wfdb.getseginfo(*args)
getseginfo = _wfdb.getseginfo

def wfdbgetskew(*args):
  return _wfdb.wfdbgetskew(*args)
wfdbgetskew = _wfdb.wfdbgetskew

def wfdbsetiskew(*args):
  return _wfdb.wfdbsetiskew(*args)
wfdbsetiskew = _wfdb.wfdbsetiskew

def wfdbsetskew(*args):
  return _wfdb.wfdbsetskew(*args)
wfdbsetskew = _wfdb.wfdbsetskew

def wfdbgetstart(*args):
  return _wfdb.wfdbgetstart(*args)
wfdbgetstart = _wfdb.wfdbgetstart

def wfdbsetstart(*args):
  return _wfdb.wfdbsetstart(*args)
wfdbsetstart = _wfdb.wfdbsetstart

def wfdbputprolog(*args):
  return _wfdb.wfdbputprolog(*args)
wfdbputprolog = _wfdb.wfdbputprolog

def wfdbquit():
  return _wfdb.wfdbquit()
wfdbquit = _wfdb.wfdbquit

def sampfreq(*args):
  return _wfdb.sampfreq(*args)
sampfreq = _wfdb.sampfreq

def setsampfreq(*args):
  return _wfdb.setsampfreq(*args)
setsampfreq = _wfdb.setsampfreq

def getcfreq():
  return _wfdb.getcfreq()
getcfreq = _wfdb.getcfreq

def setcfreq(*args):
  return _wfdb.setcfreq(*args)
setcfreq = _wfdb.setcfreq

def getbasecount():
  return _wfdb.getbasecount()
getbasecount = _wfdb.getbasecount

def setbasecount(*args):
  return _wfdb.setbasecount(*args)
setbasecount = _wfdb.setbasecount

def setbasetime(*args):
  return _wfdb.setbasetime(*args)
setbasetime = _wfdb.setbasetime

def wfdbquiet():
  return _wfdb.wfdbquiet()
wfdbquiet = _wfdb.wfdbquiet

def wfdbverbose():
  return _wfdb.wfdbverbose()
wfdbverbose = _wfdb.wfdbverbose

def wfdberror():
  return _wfdb.wfdberror()
wfdberror = _wfdb.wfdberror

def setwfdb(*args):
  return _wfdb.setwfdb(*args)
setwfdb = _wfdb.setwfdb

def getwfdb():
  return _wfdb.getwfdb()
getwfdb = _wfdb.getwfdb

def resetwfdb():
  return _wfdb.resetwfdb()
resetwfdb = _wfdb.resetwfdb

def setibsize(*args):
  return _wfdb.setibsize(*args)
setibsize = _wfdb.setibsize

def setobsize(*args):
  return _wfdb.setobsize(*args)
setobsize = _wfdb.setobsize

def wfdbfile(*args):
  return _wfdb.wfdbfile(*args)
wfdbfile = _wfdb.wfdbfile

def wfdbflush():
  return _wfdb.wfdbflush()
wfdbflush = _wfdb.wfdbflush

def wfdbmemerr(*args):
  return _wfdb.wfdbmemerr(*args)
wfdbmemerr = _wfdb.wfdbmemerr

def wfdbversion():
  return _wfdb.wfdbversion()
wfdbversion = _wfdb.wfdbversion

def wfdbldflags():
  return _wfdb.wfdbldflags()
wfdbldflags = _wfdb.wfdbldflags

def wfdbcflags():
  return _wfdb.wfdbcflags()
wfdbcflags = _wfdb.wfdbcflags

def wfdbdefwfdb():
  return _wfdb.wfdbdefwfdb()
wfdbdefwfdb = _wfdb.wfdbdefwfdb

def wfdbdefwfdbcal():
  return _wfdb.wfdbdefwfdbcal()
wfdbdefwfdbcal = _wfdb.wfdbdefwfdbcal
def input_sigal_open(record):
  nsig = _wfdb.isigopen(record, None, 0)  
  if nsig > 0:
      siArray = WFDB_SiginfoArray(nsig)
      _wfdb.isigopen(record, siArray.cast(), nsig)
      siArray.nsig = nsig
  else:
      siArray = None
  return siArray



def spy_nvsig():
  return _wfdb.spy_nvsig()
spy_nvsig = _wfdb.spy_nvsig

def spy_nsamps():
  return _wfdb.spy_nsamps()
spy_nsamps = _wfdb.spy_nsamps

def getvec2(*args):
  return _wfdb.getvec2(*args)
getvec2 = _wfdb.getvec2

def getvec2p(*args):
  return _wfdb.getvec2p(*args)
getvec2p = _wfdb.getvec2p
# This file is compatible with both classic and new-style classes.

cvar = _wfdb.cvar

